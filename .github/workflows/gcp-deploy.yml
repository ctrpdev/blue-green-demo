# .github/workflows/gcp-deploy.yml

name: Despliegue Azul-Verde en GCP

# 1. DISPARADOR: ¬øCu√°ndo se ejecuta esto?
# Se ejecuta cada vez que haces un 'push' a la rama 'main'.
on:
  push:
    branches:
      - main

# Variables de entorno para no repetir texto
env:
  GCP_PROJECT: 'eng-plasma-474018-m7'
  GCP_ZONE: 'us-central1-a'
  BACKEND_SERVICE: 'django-backend-service'

# 2. TRABAJO: ¬øQu√© tareas se van a realizar?
jobs:
  deploy-to-gcp:
    # El tipo de m√°quina virtual que usar√° GitHub para ejecutar las tareas
    runs-on: ubuntu-latest

    # 3. PASOS: La secuencia de acciones a ejecutar
    steps:
      # Paso 1: Descargar tu c√≥digo del repositorio a la m√°quina virtual de GitHub
      - name: Checkout del c√≥digo
        uses: actions/checkout@v4

      # Paso 2: Autenticarse con Google Cloud usando una clave secreta
      - name: Autenticarse en Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # Paso 3: Configurar la herramienta 'gcloud' para poder usarla
      - name: Configurar gcloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      # Paso 4: ¬°La L√≥gica! Identificar cu√°l es la m√°quina 'verde' (staging)
      - name: Identificar m√°quinas de Producci√≥n (azul) y Staging (verde)
        id: identify_vms
        run: |
          GREEN_VM=$(gcloud compute instances list --filter="labels.env=staging" --format="value(name)")
          BLUE_VM=$(gcloud compute instances list --filter="labels.env=prod" --format="value(name)")
          
          # ¬°VERIFICACI√ìN DE ROBUSTEZ!
          # Si alguna variable est√° vac√≠a, falla el pipeline con un error claro.
          if [[ -z "$GREEN_VM" || -z "$BLUE_VM" ]]; then
            echo "Error: No se pudo encontrar una VM de staging (env=staging) Y una de producci√≥n (env=prod)."
            echo "VM Staging (Verde) encontrada: '$GREEN_VM'"
            echo "VM Producci√≥n (Azul) encontrada: '$BLUE_VM'"
            echo "Por favor, verifica las etiquetas de las VMs en GCP. Debe existir una de cada una."
            exit 1
          fi
          
          echo "green_vm_name=$GREEN_VM" >> $GITHUB_OUTPUT
          echo "blue_vm_name=$BLUE_VM" >> $GITHUB_OUTPUT
          
          echo "üîµ M√°quina de Producci√≥n actual: $BLUE_VM"
          echo "üü¢ M√°quina de Staging para desplegar: $GREEN_VM"

      # Paso 5: Desplegar el nuevo c√≥digo en la m√°quina 'verde' (staging)
      - name: Desplegar c√≥digo en la m√°quina Verde
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GH_USER: ${{ github.repository_owner }}
        run: |
          gcloud compute ssh cristian@${{ steps.identify_vms.outputs.green_vm_name }} \
            --zone=${{ env.GCP_ZONE }} \
            --command="cd /home/cristian/blue-green-demo && git reset --hard HEAD && git pull https://${GH_USER}:${GH_TOKEN}@github.com/${GH_USER}/blue-green-demo.git main && docker compose up -d --build"

      # Paso 6: Cambiar el tr√°fico del balanceador para que apunte a la m√°quina 'verde'
      - name: Redirigir tr√°fico a la nueva versi√≥n (Verde)
        run: |
          echo "üîÑ Cambiando el tr√°fico del balanceador a ${{ steps.identify_vms.outputs.green_vm_name }}..."
          
          # 1. Agregamos el nuevo backend. Esto reemplazar√° autom√°ticamente al antiguo en la misma zona.
          gcloud compute backend-services add-backend ${{ env.BACKEND_SERVICE }} \
            --instance-group=${{ steps.identify_vms.outputs.green_vm_name }} \
            --instance-group-zone=${{ env.GCP_ZONE }} \
            --global
            
          # 2. Intentamos eliminar el backend antiguo. 
          # Agregamos '|| true' para que el paso no falle si el backend ya fue eliminado (que es lo esperado).
          gcloud compute backend-services remove-backend ${{ env.BACKEND_SERVICE }} \
            --instance-group=${{ steps.identify_vms.outputs.blue_vm_name }} \
            --instance-group-zone=${{ env.GCP_ZONE }} \
            --global \
            || true

      # Paso 7: Actualizar las etiquetas. ¬°Esto es clave para el pr√≥ximo despliegue!
      - name: Actualizar etiquetas de las VMs
        run: |
          echo "üè∑Ô∏è Actualizando etiquetas..."
          # La m√°quina verde ahora es producci√≥n
          gcloud compute instances add-labels ${{ steps.identify_vms.outputs.green_vm_name }} --labels=env=prod --zone=${{ env.GCP_ZONE }}
          # La m√°quina azul ahora es staging
          gcloud compute instances add-labels ${{ steps.identify_vms.outputs.blue_vm_name }} --labels=env=staging --zone=${{ env.GCP_ZONE }}
          echo "‚úÖ ¬°Despliegue completado! ${{ steps.identify_vms.outputs.green_vm_name }} es la nueva m√°quina de producci√≥n."
